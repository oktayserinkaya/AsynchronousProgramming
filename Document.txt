* Core, DataAccess ve WEB katmanlarýný oluþturduk

* Core katmanýnda Entities klasörü yaptýk

* Entities içinde Abstract ve Concrete klasörleri oluþturduk

* Abstract içinde BaseEntity oluþturduk

* Concrete içinde Category ve Product sýnýflarýný oluþturduk ve annotations larýný ayarladýk

* Product oluþtururken IFormFile Ctrl. yapýp install package dedik

* IFormFile database e girmesin diye NotMapped dedik

* DataAccess ve WEB katmanlarýna kurmamýz gereken paketleri kurduk

* DataAccess ve WEB katmanlarýna proje referanslarýný ekledik

* WEB katmanýný "Set As Startup Project" olarak belirledik

* DataAccess katmanýna Context ve SeedData klasörlerini ekledik

* SeedData içinde CategorySeedData ve ProductSeedData sýnýflarýný ekledik ve içlerini doldurduk

* WEB katmanýnda wwwroot içinde ürün resimleri için "images" klasörü yaptýk ve resimleri içine koyduk

* DataAccess katmanýnda AppDbContext oluþturarak database e gidecek tablolarý yazdýk

* "appsettings.json" dosyasýna SQL baðlantýsý için connection string ekledik

* "Program.cs" dosyasýndaki düzenlemeleri yaptýk (SQL Server Baðlantýsý için)

* "Package Manager Console" da DataAccess katmanýný seçerek add-migration ve update-database iþlemlerini uyguladýk

* "SQL Server Object Explorer" penceresinden oluþturduðumuz database ve veri alanlarýný kontrol ettik

* ProductSeedData dosyasýnda ImagePath özelliðini düzenleyerek tekrar migration yaptýk ve verileri kontrol eetik

* DataAccess katmanýnda Services klasörü açtýk

* Services içinde Concrete ve Interface klasörleri oluþturduk

* Concrete içinde BaseRepository sýnýf ve Interface içinde IBaseRepository interface oluþturduk

* IBaseRepository nin içini uygun þekilde düzenledik

* Bunu yaparken DataAccess katmanýnda mesajlar için Utils klasörü oluþturduk

* Utils içinde ServiceMessages sýnýfý oluþturarak verilecek service mesajlarýný düzenledik

* BaseRepository sýnýfý içinde IBaseRepository den miras alarak interfaceleri implemente ettik

* ICategoryRepository ve IProductRepository interfaceleri ekledik (Services interface klasörüne)

* CategoryRepository ve ProductRepository class larý ekledik (Services concrete klasörüne)

* WEB katmanýnda autofac klasörü ve içinde Autofac BusinessModule sýnýfý oluþturduk

* Program.cs dosyasýnda AUTOFAC konfigürasyonu yaptýk

* Web katmanýna autofac ve autofac.extensions.dependencyinjection paketlerini ekledik

* Controller ve view ekleyerek deneme yaptýk

* WEB katmanýnda Models içinde CategoryViewModels klasörü açtýk ve GetCategoryVM class oluþturduk.

* WEB katmanýna automapper paketi yükledik

* WEB katmanýnda automapper klasörü açtýk

* Automapper içinde CategoryMapping class oluþturduk.

* web katmanýnda autofac kalsörü içinde AutofacBusinessModule class oluþturduk

* _ViewImports içine using satýrý ekledik

* Index.cshtml içini doldururken diðer taraftan _layout dosyasýnda gerekli düzenlemeleri yaptýk

* site.css ve site.js dosyalarýný amaca uygun þekilde düzenledik

* 